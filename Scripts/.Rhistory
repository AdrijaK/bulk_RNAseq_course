res <- as.data.frame(res)
res$gene_name <- mcols(dds)$Geneid
res[["padj"]][is.na(res[["padj"]])]<-0.99
res[["log2FoldChange"]][is.na(res[["log2FoldChange"]])]<-0
## Up and down regulated genes
up_dox_tam_vs_h2o_tam<-filter(res,log2FoldChange>1, padj<0.05)$gene_name
down_dox_tam_vs_h2o_tam<-filter(res,log2FoldChange<(-1),padj<0.05)$gene_name
up_and_down_dox_tam_vs_h2o_tam <- filter(res, abs(log2FoldChange)> 1, padj < 0.05)
### H2O_ETOH as reference ###
colData$condition = factor(colData$ShortLabel, levels = c("H2O_ETOH_8h","H2O_4OHT_8h","DOX_ETOH_8h","DOX_4OHT_8h"))
colData$Dox = factor(colData$Dox, levels = c("H2O","DOX"))
colData$Tam = factor(colData$Tam, levels = c("ETOH", "4OHT"))
## DESeq analysis ##
#full condition
dds <- DESeqDataSetFromMatrix(counts, colData, design = ~ condition)
#Adding the extrated annotation that we did at the beginning and add it to the information that we just retrieved
mcols(dds) = cbind(annot,mcols(dds))
## Pre-filtering the dataset
nrow(dds)
dds <- dds[rowSums(counts(dds)) > 10, ]
nrow(dds)
### DE analysis 4OHT vs Control
## Up and down regulated pErk regulated genes
dds <- DESeq(dds)
res <- results(dds, name = "condition_H2O_4OHT_8h_vs_H2O_ETOH_8h")
res <- as.data.frame(res)
res$gene_name <- mcols(dds)$Geneid
res[["padj"]][is.na(res[["padj"]])]<-0.99
res[["log2FoldChange"]][is.na(res[["log2FoldChange"]])]<-0
up<-filter(res,log2FoldChange>1, padj<0.05)
down<-filter(res,log2FoldChange<(-1),padj<0.05)
up_and_down_tam_vs_etoh <- filter(res, abs(log2FoldChange)> 1, padj < 0.05)
up_and_down_tam_vs_etoh$DE <- "Up"
up_and_down_tam_vs_etoh$DE[up_and_down_tam_vs_etoh$log2FoldChange < (-1)] <- "Down"
#tam_regulated <- data.frame (genes = rbind(up,down), DE = c(rep("up",nrow(up)), rep("down", nrow(down))))
#write.table(tam_regulated, file = paste0(dir,"results/4OHT_vs_Control_DE_genes.tsv"), sep = "\t",
#            quote = F, col.names = T, row.names = F)
## Hetmap of genes regulated by pErk
#mat <- assay(normTransform(dds))
mat <- assay(rlog(dds))
rownames(mat) <- mcols(dds)$Geneid
mat  <- mat[up_and_down_tam_vs_etoh$gene_name,]
#mat  <- mat - rowMeans(mat)
mat <- mat[,c("DOX_8h_4OHT_a_S28_uniq", "DOX_8h_4OHT_b_S29_uniq", "DOX_8h_4OHT_d_S30_uniq",
"H2O_8h_4OHT_a_S25_uniq", "H2O_8h_4OHT_b_S26_uniq", "H2O_8h_4OHT_d_S27_uniq",
"DOX_8h_ETOH_a_S22_uniq", "DOX_8h_ETOH_b_S23_uniq", "DOX_8h_ETOH_d_S24_uniq",
"H2O_8h_ETOH_a_S19_uniq", "H2O_8h_ETOH_b_S20_uniq", "H2O_8h_ETOH_d_S21_uniq")]
#row_clustering <- hclust(dist(mat[,c("H2O_8h_4OHT_a_S25_uniq", "H2O_8h_4OHT_b_S26_uniq", "H2O_8h_4OHT_d_S27_uniq",
#                                     "H2O_8h_ETOH_a_S19_uniq", "H2O_8h_ETOH_b_S20_uniq", "H2O_8h_ETOH_d_S21_uniq",
#                                     "DOX_8h_4OHT_a_S28_uniq", "DOX_8h_4OHT_b_S29_uniq", "DOX_8h_4OHT_d_S30_uniq")]))
row_anno <- data.frame(row.names = rownames(mat), pErk_DE = up_and_down_tam_vs_etoh$DE)
row_anno$pErk_mutant_DE <- "No change"
row_anno$pErk_mutant_DE[row.names(row_anno) %in% intersect(row.names(row_anno), up_dox_tam_vs_h2o_tam)] <- "Up"
row_anno$pErk_mutant_DE[row.names(row_anno) %in% intersect(row.names(row_anno), down_dox_tam_vs_h2o_tam) ] <- "Down"
anno <- as.data.frame(colData(dds)[c("DOX_8h_4OHT_a_S28_uniq", "DOX_8h_4OHT_b_S29_uniq", "DOX_8h_4OHT_d_S30_uniq",
"H2O_8h_4OHT_a_S25_uniq", "H2O_8h_4OHT_b_S26_uniq", "H2O_8h_4OHT_d_S27_uniq",
"DOX_8h_ETOH_a_S22_uniq", "DOX_8h_ETOH_b_S23_uniq", "DOX_8h_ETOH_d_S24_uniq",
"H2O_8h_ETOH_a_S19_uniq", "H2O_8h_ETOH_b_S20_uniq", "H2O_8h_ETOH_d_S21_uniq"), c("Dox","Tam")])
colnames(anno) <- c("Oct4", "pErk")
anno$Oct4 <- as.character(anno$Oct4)
anno$Oct4[which(anno$Oct4 == "DOX")] <- "-"
anno$Oct4[which(anno$Oct4 == "H2O")] <- "+"
anno$Oct4 <- as.factor(anno$Oct4)
anno$pErk <- as.character(anno$pErk)
anno$pErk[which(anno$pErk == "4OHT")] <- "+"
anno$pErk[which(anno$pErk == "ETOH")] <- "-"
anno$pErk <- as.factor(anno$pErk)
ann_colors <- list(Oct4 = c("+"="grey45", "-"= "grey75"), pErk = c("+"="grey45", "-"= "grey75"),
pErk_DE = c("Up" = "firebrick2", "Down" = "skyblue2"),
pErk_mutant_DE = c("Up" = "firebrick2", "Down" = "skyblue2", "No change" = "grey"))
pheatmap(#filename = paste0(dir,"results/tam_vs_etoh_annotated_heatmap.png"),
mat, annotation_col = anno, annotation_colors = ann_colors,
annotation_row = row_anno,
show_rownames = F, show_colnames = F,
cluster_cols = F, cluster_rows = T,
main = "Dysregulation of Fgf-Erk dependent genes", scale = "row",
treeheight_row = 0, treeheight_col = 0, width = 7, height = 7)
row_anno
mcols
mcols(dds)
row_anno
row_anno$Geneid <- rownames(row_anno)
head(merge(row_anno, mcols(dds)[,c("Geneid","GeneSymbol")], by = "Geneid"))
row_anno <- merge(row_anno, mcols(dds)[,c("Geneid","GeneSymbol")], by = "Geneid")
setwd("/Volumes/groupdir/SUN-DAN-Brickman/Jose/Elena/RNAseq_analysis/nascent_RNAseq_20200526/scripts")
paste0(dir,"results/tam_vs_etoh_annotated_heatmap_row_anno.tsv")
head(row_anno)
write.table(row_anno, file = paste0(dir,"results/tam_vs_etoh_annotated_heatmap_row_anno.tsv"), row.names = F, col.names = T, sep = "\t", quote = F)
genes <- read_delim("/Volumes/groupdir/SUN-DAN-Brickman/Jose/Elena/RNAseq_analysis/nascent_RNAseq_20200526/results/tam_vs_etoh_annotated_heatmap_row_anno.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
genes <- read_delim("/Volumes/groupdir/SUN-DAN-Brickman/Jose/Elena/RNAseq_analysis/nascent_RNAseq_20200526/results/tam_vs_etoh_annotated_heatmap_row_anno.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(genes)
gene_lists <- lists(list1 = genes %>% filter(pErk_DE == "Up" & pErk_mutant_DE == "Up") %>% select(GeneSymbol),
list2 = genes %>% filter(pErk_DE == "Up" & pErk_mutant_DE == "Down") %>% select(GeneSymbol),
list3 = genes %>% filter(pErk_DE == "Down" & pErk_mutant_DE == "Up") %>% select(GeneSymbol),
list4 = genes %>% filter(pErk_DE == "Down" & pErk_mutant_DE == "Down") %>% select(GeneSymbol))
gene_lists <- list(list1 = genes %>% filter(pErk_DE == "Up" & pErk_mutant_DE == "Up") %>% select(GeneSymbol),
list2 = genes %>% filter(pErk_DE == "Up" & pErk_mutant_DE == "Down") %>% select(GeneSymbol),
list3 = genes %>% filter(pErk_DE == "Down" & pErk_mutant_DE == "Up") %>% select(GeneSymbol),
list4 = genes %>% filter(pErk_DE == "Down" & pErk_mutant_DE == "Down") %>% select(GeneSymbol))
library(reshape2)
library(rGREAT)
library(GeneOverlap)
library(tidyverse)
gene_lists <- list(list1 = genes %>% filter(pErk_DE == "Up" & pErk_mutant_DE == "Up") %>% dplyr::select(GeneSymbol),
list2 = genes %>% filter(pErk_DE == "Up" & pErk_mutant_DE == "Down") %>% dplyr::select(GeneSymbol),
list3 = genes %>% filter(pErk_DE == "Down" & pErk_mutant_DE == "Up") %>% dplyr::select(GeneSymbol),
list4 = genes %>% filter(pErk_DE == "Down" & pErk_mutant_DE == "Down") %>% dplyr::select(GeneSymbol))
gene_lists
sapply(gene_lists, as.character)
lapply(gene_lists, as.character)
gene_lists
gene_lists <- list(list1 = genes %>% filter(pErk_DE == "Up" & pErk_mutant_DE == "Up") %>% dplyr::pull(GeneSymbol),
list2 = genes %>% filter(pErk_DE == "Up" & pErk_mutant_DE == "Down") %>% dplyr::pull(GeneSymbol),
list3 = genes %>% filter(pErk_DE == "Down" & pErk_mutant_DE == "Up") %>% dplyr::pull(GeneSymbol),
list4 = genes %>% filter(pErk_DE == "Down" & pErk_mutant_DE == "Down") %>% dplyr::pull(GeneSymbol))
gene_lists <- lapply(gene_lists, as.character)
gene_lists
gene_lists <- lapply(gene_lists, tolower)
gene_lists
marker_database <- read_delim("/Volumes/groupdir/SUN-DAN-Brickman/Jose/Elena/Oct4_RNA_ChIP_comparison/GEA_25102021/data/marker_database_20210927.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
marker_database$genes <- tolower(marker_database$genes)
marker_database$genes <- strsplit(marker_database$genes, split = ",")
database_lists <- marker_database$genes
names(database_lists) <- paste(marker_database$publication, "|",marker_database$cluster)
data(GeneOverlap)
genomic_size <- gs.RNASeq
gom.obj <- newGOM(gsetA = ChIP_genes, gsetB = database_lists, genome.size = genomic_size)
gom.obj <- newGOM(gsetA = gene_lists, gsetB = database_lists, genome.size = genomic_size)
gom.obj
pvals <- getMatrix(gom.obj, name = "pval")
odds <- getMatrix(gom.obj, name = "odds.ratio")
log_odds <- log2(odds)
melt_pvals <- melt(pvals)
colnames(melt_pvals) <- c("ChIP_lists","Database_lists","value")
melt_pvals$Study <- unlist(lapply(strsplit(as.character(melt_pvals$Database_lists), split =  "|", fixed = T), "[", 1))
melt_pvals$Study <- trimws(melt_pvals$Study)
melt_pvals$cell_type <- unlist(lapply(strsplit(as.character(melt_pvals$Database_lists), split =  "|", fixed = T), "[", 2))
melt_pvals$cell_type <- trimws(melt_pvals$cell_type)
melt_logodds <- melt(log_odds)
colnames(melt_logodds) <- c("ChIP_lists","Database_lists","value")
melt_logodds$Study <- unlist(lapply(strsplit(as.character(melt_logodds$Database_lists), split =  "|", fixed = T), "[", 1))
melt_logodds$Study <- trimws(melt_logodds$Study)
melt_logodds$cell_type <- unlist(lapply(strsplit(as.character(melt_logodds$Database_lists), split =  "|", fixed = T), "[", 2))
melt_logodds$cell_type <- trimws(melt_logodds$cell_type)
melt_pvals$odds <- melt_logodds$value
melt_pvals$odds[!is.finite(melt_pvals$odds)] <- NA
limit <- max(abs(melt_pvals$odds), na.rm = T) * c(-1, 1)
ggplot(melt_pvals) + geom_point(aes(x = factor(genes_lists), y = factor(cell_type), color = odds, size = -log10(value) )) +
labs(x = "ChIP gene lists", y = "Database gene lists", color = "log2(odds ratio)", size = "-log10(p-value)") +
scale_color_distiller(palette = "RdBu", direction = -1, limit = limit) + scale_size_continuous(range = c(1,5)) +
facet_grid(Study~., scales = "free", space = "free", drop = T) + theme_bw() +
theme(axis.text.x = element_text(angle = 90), strip.text.y = element_text(angle = 0))
ggplot(melt_pvals) + geom_point(aes(x = factor(gene_lists), y = factor(cell_type), color = odds, size = -log10(value) )) +
labs(x = "ChIP gene lists", y = "Database gene lists", color = "log2(odds ratio)", size = "-log10(p-value)") +
scale_color_distiller(palette = "RdBu", direction = -1, limit = limit) + scale_size_continuous(range = c(1,5)) +
facet_grid(Study~., scales = "free", space = "free", drop = T) + theme_bw() +
theme(axis.text.x = element_text(angle = 90), strip.text.y = element_text(angle = 0))
ggplot(melt_pvals) + geom_point(aes(x = factor(ChIP_lists), y = factor(cell_type), color = odds, size = -log10(value) )) +
labs(x = "ChIP gene lists", y = "Database gene lists", color = "log2(odds ratio)", size = "-log10(p-value)") +
scale_color_distiller(palette = "RdBu", direction = -1, limit = limit) + scale_size_continuous(range = c(1,5)) +
facet_grid(Study~., scales = "free", space = "free", drop = T) + theme_bw() +
theme(axis.text.x = element_text(angle = 90), strip.text.y = element_text(angle = 0))
melt_pvals <- melt(pvals)
colnames(melt_pvals) <- c("RNA_lists","Database_lists","value")
melt_pvals$Study <- unlist(lapply(strsplit(as.character(melt_pvals$Database_lists), split =  "|", fixed = T), "[", 1))
melt_pvals$Study <- trimws(melt_pvals$Study)
melt_pvals$cell_type <- unlist(lapply(strsplit(as.character(melt_pvals$Database_lists), split =  "|", fixed = T), "[", 2))
melt_pvals$cell_type <- trimws(melt_pvals$cell_type)
melt_logodds <- melt(log_odds)
colnames(melt_logodds) <- c("RNA_lists","Database_lists","value")
melt_logodds$Study <- unlist(lapply(strsplit(as.character(melt_logodds$Database_lists), split =  "|", fixed = T), "[", 1))
melt_logodds$Study <- trimws(melt_logodds$Study)
melt_logodds$cell_type <- unlist(lapply(strsplit(as.character(melt_logodds$Database_lists), split =  "|", fixed = T), "[", 2))
melt_logodds$cell_type <- trimws(melt_logodds$cell_type)
melt_pvals$odds <- melt_logodds$value
melt_pvals$odds[!is.finite(melt_pvals$odds)] <- NA
limit <- max(abs(melt_pvals$odds), na.rm = T) * c(-1, 1)
ggplot(melt_pvals) + geom_point(aes(x = factor(RNA_lists), y = factor(cell_type), color = odds, size = -log10(value) )) +
labs(x = "ChIP gene lists", y = "Database gene lists", color = "log2(odds ratio)", size = "-log10(p-value)") +
scale_color_distiller(palette = "RdBu", direction = -1, limit = limit) + scale_size_continuous(range = c(1,5)) +
facet_grid(Study~., scales = "free", space = "free", drop = T) + theme_bw() +
theme(axis.text.x = element_text(angle = 90), strip.text.y = element_text(angle = 0))
library(tidyverse)
finances <- read_delim("Desktop/Nemkonto 6891370391 - 2021.10.27 11.02.csv", delim = ";",
escape_double = FALSE, locale = locale(decimal_mark = ",",
grouping_mark = "."), trim_ws = TRUE)
View(finances)
View(finances)
duplicated(finances$Balance)
duplicated(finances$`Booking date`)
finances <- finances[!duplicated(finances$`Booking date`),]
head(finances)
ggplot(finances %>% , aes_string(x = "Booking date", y = "Balance")) + geom_line
ggplot(finances, aes_string(x = "Booking date", y = "Balance")) + geom_line
colnames(finances) <- gsub(colnames(finances), pattern = " ", replacement = "_")
ggplot(finances, aes(x = Booking_date, y = Balance)) + geom_line()
ggplot(finances, aes(x = Booking_date, y = Balance)) + geom_point()
ggplot(finances, aes(x = Booking_date, y = Balance)) + geom_point()  +theme(axis.text.x = element_text(angle = 45))
ggplot(finances, aes(x = Booking_date, y = Balance)) + geom_point()  +theme(axis.text.x = element_text(angle = 45, hjust = 1))
as.Date(finances$Booking_date)
as.Date(finances$Booking_date, format = "%d.%m.%Y")
finances$Booking_date <- as.Date(finances$Booking_date, format = "%d.%m.%Y")
ggplot(finances, aes(x = Booking_date, y = Balance)) + geom_point()  +theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(finances, aes(x = Booking_date, y = Balance)) + geom_line()  +theme(axis.text.x = element_text(angle = 45, hjust = 1))
setwd("~/repos/bulk_RNAseq_course/Scripts")
library(readr)
pasilla_cts <- read_delim("~/repos/bulk_RNAseq_course/Data/pasilla_cts.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(pasilla_cts)
cts <- data.frame(read.csv(file = "../data/pasilla_cts.tsv",sep="\t",row.names="flybase_id"))
head(cts)
coldata <- read.csv(file = "../data/pasilla_metadata.tsv", row.names=1, sep = "\t")
head(coldata)
coldata$condition <- factor(coldata$condition)
paste("The order of the conditions is:", paste(unique(coldata$condition), collapse=", "))
coldata$type <- factor(coldata$type)
paste("The order of the types is:", paste(unique(coldata$type), collapse=", "))
#coldata$condition <- factor(coldata$condition, levels = c("untreated","treated"))
coldata$condition <- relevel(coldata$condition, ref = "untreated") #Specifies "untreated" as the reference level
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
library(tidyverse)
library(DESeq2)
library(RColorBrewer)
library(pheatmap)
library(gprofiler2)
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds <- DESeq(dds)
res <- results(dds)
head(data.frame(res))
dds
cts
plot(density(cts))
cts
plotdensity(as.matrix(cts))
plot(density(as.matrix(cts))
plot(density(as.matrix(cts)))
melt_cts <- melt(cts)
cts %>% pivot_longer()
cts %>% pivot_longer(cols = "flybase_id")
cts
View(cts)
reshape2::melt(cts)
melt_cts <- reshape2::melt(cts)
View(melt_cts)
ggplot(melt_cts, aes(x = value, group = variable, color = variable)) + geom_density()
melt_cts$log2 <- log2(melt_cts$value + 1)
ggplot(melt_cts, aes(x = log2, group = variable, color = variable)) + geom_density()
counts(dds, normalized=TRUE)
View(counts(dds, normalized=TRUE))
reshape2::melt(counts(dds, normalized=TRUE))[,"value"]
melt_cts$norm <- reshape2::melt(counts(dds, normalized=TRUE))[,"value"]
melt_norm <- reshape2::melt(counts(dds, normalized=TRUE))
ggplot(melt_norm, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Normalized counts")
View(melt_norm)
View(cts)
View(counts(dds, normalized = True))
View(counts(dds, normalized = T))
norm_cts <- counts(dds, normalized=TRUE)
norm_cts <- data.frame(counts(dds, normalized=TRUE))
melt_norm <- reshape2::melt(counts(dds, normalized=TRUE))
View(melt_norm)
View(melt_cts)
View(norm_cts)
melt_norm <- reshape2::melt(norm_cts)
ggplot(melt_norm, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Normalized counts")
ggplot(melt_cts, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Raw counts")
ggplot(melt_cts, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Raw counts")
ggplot(melt_cts, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Raw counts")
ggplot(melt_cts, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Raw counts")
ggplot(melt_cts, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Raw counts")
ggplot(melt_cts, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Raw counts")
ggplot(melt_cts, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Raw counts")
ggplot(melt_cts, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Raw counts")
ggplot(melt_cts, aes(x = log2, group = variable, color = variable)) +
geom_density() + xlab("log2(Raw counts + 1)")
DOCNAME = knitr::current_input()
knitr::opts_chunk$set(autodep        = TRUE,
cache          = FALSE,
cache.path     = paste0("cache/", DOCNAME, "/"),
cache.comments = TRUE,
echo           = TRUE,
error          = FALSE,
fig.align      = "center",
fig.path       = paste0("../reports/figures/", DOCNAME, "/"),
fig.width      = 10,
fig.height     = 8,
message        = FALSE,
warning        = FALSE)
library(DESeq2)
library(tidyverse)
library(RColorBrewer)
library(pheatmap)
library(gprofiler2)
cts <- data.frame(read.csv(file = "../data/airway_cts.tsv", sep = "\t", row.names = "ensembl_id"))
coldata <- data.frame(read.csv(file = "../data/airway_metadata.tsv", sep = "\t", row.names = "ID"))
head(cts)
head(coldata)
coldata$dex <- factor(coldata$dex)
paste("The order of the conditions is:", paste(unique(coldata$dex), collapse=", "))
#coldata$dex <- factor(coldata$dex, levels = c("untreated","treated"))
coldata$dex <- relevel(coldata$dex, ref = "untrt") #Specifies "untreated" as the reference level
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ dex)
dds
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds <- DESeq(dds)
res <- results(dds)
head(data.frame(res))
mcols(res)$description
res <- results(dds, contrast=c("dex","untrt","trt"))
#head(data.frame(res))
resultsNames(dds)
res <- results(dds, name="dex_trt_vs_untrt")
#head(data.frame(res))
res$padj[is.na(res$padj)] <- 1
results_summary <- function(x, alpha = 0.05, LFC = 1) {
ngenes <- nrow(x)
signif <- sum(x$padj < alpha, na.rm = T)
up <- sum(x$padj < alpha & x$log2FoldChange > LFC, na.rm = T)
down <- sum(x$padj < alpha & x$log2FoldChange < -LFC, na.rm = T)
results <- c(paste0("Number of genes: ", ngenes),
paste0("Number of genes with adjusted p-value < ",alpha,": ", signif, " (", round((signif/ngenes)*100,digits = 2),"%)"),
"  Of those:",
paste0("    with LFC < ", -LFC, ": ", down, " (", round((down/ngenes)*100,digits = 2),"%)"),
paste0("    with LFC > ", LFC, ": ", up, " (", round((up/ngenes)*100,digits = 2),"%)"))
writeLines(paste(results, collapse = "\n"))
return(paste(results, collapse = "\n"))
}
res_summary <- results_summary(res, alpha = 0.05, LFC = 1)
LFC <- 1
adj_pvalue <- 0.05
sig_res <- data.frame(res[res$padj < adj_pvalue & abs(res$log2FoldChange) > LFC,])
#write.table(x = sig_res, "./significant_results.tsv", quote = F, col.names = T, row.names = T, sep = "\t")
d <- plotCounts(dds, gene=which.min(res$padj), intgroup="dex",
returnData=TRUE)
ggplot(d, aes(x=dex, y=count, color = dex)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400)) + theme_bw()
vsd <- vst(dds) #Variance Stabilizing Transformation, vst is faster with larger number of samples
rld <- rlog(dds) #Regularized
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$dex, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=dex)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed() + theme_bw()
pheatmap(sampleDistMatrix, width = 5, height = 5,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
pheatmap(sampleDistMatrix, width = 2, height = 2,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
vsd$dex
data.frame(row.names = vsd$dex, treatment = vsd$dex)
vsd$dex
paste(vsd$dex, sep="-")
make.unique(vsd$dex)
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- make.unique(as.character(vsd$dex))
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
anno_row <- data.frame(row.names = make.unique(as.character(vsd$dex)), treatment = vsd$dex)
pheatmap(sampleDistMatrix, annotation_col = anno_row,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
annot_row
anno_row
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- make.unique(as.character(vsd$dex))
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
anno_row <- data.frame(row.names = make.unique(as.character(vsd$dex)), treatment = vsd$dex)
pheatmap(sampleDistMatrix, annotation_col = anno_row,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
sampleDistMatrix
pheatmap(sampleDistMatrix, annotation_row = anno_row,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- NULL
colnames(sampleDistMatrix) <- make.unique(as.character(vsd$dex))
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
anno_row <- data.frame(row.names = make.unique(as.character(vsd$dex)), treatment = vsd$dex)
pheatmap(sampleDistMatrix, annotation_col = anno_row,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
rev(pcaData$dex)
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
pcaData$dex <- rev(pcaData$dex)
ggplot(pcaData, aes(PC1, PC2, color=dex)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed() + theme_bw()
sample(pcaData$dex)
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
pcaData$dex <- sample(pcaData$dex)
ggplot(pcaData, aes(PC1, PC2, color=dex)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed() + theme_bw()
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
pcaData$dex <- sample(pcaData$dex)
ggplot(pcaData, aes(PC1, PC2, color=dex)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed() + theme_bw()
DOCNAME = knitr::current_input()
knitr::opts_chunk$set(autodep        = TRUE,
cache          = FALSE,
cache.path     = paste0("cache/", DOCNAME, "/"),
cache.comments = TRUE,
echo           = TRUE,
error          = FALSE,
fig.align      = "center",
fig.path       = paste0("../reports/figures/", DOCNAME, "/"),
fig.width      = 10,
fig.height     = 8,
message        = FALSE,
warning        = FALSE)
library(tidyverse)
library(DESeq2)
library(RColorBrewer)
library(pheatmap)
library(gprofiler2)
cts <- data.frame(read.csv(file = "../data/pasilla_cts.tsv",sep="\t",row.names="flybase_id"))
head(cts)
coldata <- read.csv(file = "../data/pasilla_metadata.tsv", row.names=1, sep = "\t")
head(coldata)
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds <- DESeq(dds)
melt_cts <- reshape2::melt(cts)
melt_cts$log2 <- log2(melt_cts$value + 1)
norm_cts <- data.frame(counts(dds, normalized=TRUE))
melt_norm <- reshape2::melt(norm_cts)
ggplot(melt_cts, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Raw counts")
ggplot(melt_cts, aes(x = log2, group = variable, color = variable)) +
geom_density() + xlab("log2(Raw counts + 1)")
ggplot(melt_norm, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Normalized counts")
devtools::session_info()
ggplot(melt_norm, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Normalized counts")
ggplot(melt_norm, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Normalized counts")
ggplot(melt_norm, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Normalized counts")
ggplot(melt_cts, aes(x = log2, group = variable, color = variable)) +
geom_density() + xlab("log2(Raw counts + 1)")
ggplot(melt_cts, aes(x = value, group = variable, color = variable)) +
geom_density() + xlab("Raw counts")
